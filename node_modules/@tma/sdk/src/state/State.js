/**
 * Represents state which is observable via passed EventEmitter.
 */ export class State {
  state;
  ee;
  constructor(state, ee){
    this.state = state;
    this.ee = ee;
  }
  internalSet(key, value) {
    if (this.state[key] === value || value === undefined) {
      return false;
    }
    this.state[key] = value;
    this.ee.emit(`change:${key}`, value);
    return true;
  }
  /**
   * Returns copy of current state.
   */ clone() {
    return {
      ...this.state
    };
  }
  set(keyOrState, value) {
    let didChange = false;
    if (typeof keyOrState === 'string') {
      didChange = this.internalSet(keyOrState, value);
    } else {
      // eslint-disable-next-line
      for(const key in keyOrState){
        if (this.internalSet(key, keyOrState[key])) {
          didChange = true;
        }
      }
    }
    if (didChange) {
      this.ee.emit('change');
    }
  }
  /**
   * Returns value by specified key.
   * @param key - state key.
   */ get(key) {
    return this.state[key];
  }
}
//# sourceMappingURL=State.js.map