import { off } from "../../bridge/events/off.js";
import { on } from "../../bridge/events/on.js";
import { postEvent as defaultPostEvent } from "../../bridge/methods/postEvent.js";
import { EventEmitter } from "../../event-emitter/EventEmitter.js";
import { State } from "../../state/State.js";
import { createSupportsFunc } from "../../supports/createSupportsFunc.js";
export class SettingsButton {
  postEvent;
  ee;
  state;
  constructor(isVisible, version, postEvent = defaultPostEvent){
    this.postEvent = postEvent;
    this.ee = new EventEmitter();
    this./**
   * Adds event listener.
   * @param event - event name.
   * @param listener - event listener.
   */ on = (event, listener)=>event === 'click' ? on('settings_button_pressed', listener) : this.ee.on(event, listener);
    this./**
   * Removes event listener.
   * @param event - event name.
   * @param listener - event listener.
   */ off = (event, listener)=>event === 'click' ? off('settings_button_pressed', listener) : this.ee.off(event, listener);
    this.state = new State({
      isVisible
    }, this.ee);
    this.supports = createSupportsFunc(version, {
      show: 'web_app_setup_settings_button',
      hide: 'web_app_setup_settings_button'
    });
  }
  set isVisible(visible) {
    this.state.set('isVisible', visible);
    this.postEvent('web_app_setup_settings_button', {
      is_visible: visible
    });
  }
  /**
   * True if SettingsButton is currently visible.
   */ get isVisible() {
    return this.state.get('isVisible');
  }
  /**
   * Hides the SettingsButton.
   */ hide() {
    this.isVisible = false;
  }
  on;
  off;
  /**
   * Shows the SettingsButton.
   */ show() {
    this.isVisible = true;
  }
  /**
   * Checks if specified method is supported by current component.
   */ supports;
}
//# sourceMappingURL=SettingsButton.js.map