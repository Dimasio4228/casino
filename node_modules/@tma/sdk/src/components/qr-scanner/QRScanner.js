import { postEvent as defaultPostEvent } from "../../bridge/methods/postEvent.js";
import { request } from "../../bridge/request.js";
import { EventEmitter } from "../../event-emitter/EventEmitter.js";
import { State } from "../../state/State.js";
import { createSupportsFunc } from "../../supports/createSupportsFunc.js";
/**
 * Provides QR scanner functionality.
 */ export class QRScanner {
  postEvent;
  ee;
  state;
  constructor(version, postEvent = defaultPostEvent){
    this.postEvent = postEvent;
    this.ee = new EventEmitter();
    this./**
   * Adds new event listener.
   */ on = this.ee.on.bind(this.ee);
    this./**
   * Removes event listener.
   */ off = this.ee.off.bind(this.ee);
    this.state = new State({
      isOpened: false
    }, this.ee);
    this.supports = createSupportsFunc(version, {
      close: 'web_app_close_scan_qr_popup',
      open: 'web_app_open_scan_qr_popup'
    });
  }
  /**
   * Closes scanner.
   */ close() {
    this.postEvent('web_app_close_scan_qr_popup');
    this.isOpened = false;
  }
  set isOpened(value) {
    this.state.set('isOpened', value);
  }
  /**
   * Returns true in case, QR scanner is currently opened.
   */ get isOpened() {
    return this.state.get('isOpened');
  }
  /**
   * Opens scanner with specified title shown to user. Method returns promise
   * with scanned QR content in case, it was scanned. It will contain null in
   * case, scanner was closed.
   * @param text - title to display.
   */ async open(text) {
    if (this.isOpened) {
      throw new Error('QR scanner is already opened.');
    }
    this.isOpened = true;
    try {
      const result = await request('web_app_open_scan_qr_popup', {
        text
      }, [
        'qr_text_received',
        'scan_qr_popup_closed'
      ], {
        postEvent: this.postEvent
      });
      return typeof result === 'object' && typeof result.data === 'string' ? result.data : null;
    } finally{
      this.isOpened = false;
    }
  }
  on;
  off;
  /**
   * Checks if specified method is supported by current component.
   */ supports;
}
//# sourceMappingURL=QRScanner.js.map