import { postEvent as defaultPostEvent } from "../../bridge/methods/postEvent.js";
import { EventEmitter } from "../../event-emitter/EventEmitter.js";
import { State } from "../../state/State.js";
/**
 * Component responsible for controlling current closing confirmation
 * status.
 */ export class ClosingBehavior {
  postEvent;
  ee;
  state;
  constructor(isConfirmationNeeded, postEvent = defaultPostEvent){
    this.postEvent = postEvent;
    this.ee = new EventEmitter();
    this./**
   * Adds new event listener.
   */ on = this.ee.on.bind(this.ee);
    this./**
   * Removes event listener.
   */ off = this.ee.off.bind(this.ee);
    this.state = new State({
      isConfirmationNeeded
    }, this.ee);
  }
  set isConfirmationNeeded(value) {
    this.state.set('isConfirmationNeeded', value);
    this.postEvent('web_app_setup_closing_behavior', {
      need_confirmation: value
    });
  }
  /**
   * Returns true, if the confirmation dialog enabled while the user is trying
   * to close the Mini App.
   */ get isConfirmationNeeded() {
    return this.state.get('isConfirmationNeeded');
  }
  /**
   * Disables the confirmation dialog while the user is trying to close the
   * Mini App.
   */ disableConfirmation() {
    this.isConfirmationNeeded = false;
  }
  /**
   * Enables the confirmation dialog while the user is trying to close the
   * Mini App.
   */ enableConfirmation() {
    this.isConfirmationNeeded = true;
  }
  on;
  off;
}
//# sourceMappingURL=ClosingBehavior.js.map