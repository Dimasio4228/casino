import { invokeCustomMethod } from "../../bridge/invokeCustomMethod.js";
import { postEvent as defaultPostEvent } from "../../bridge/methods/postEvent.js";
import { array } from "../../parsing/parsers/array.js";
import { json } from "../../parsing/parsers/json.js";
import { string } from "../../parsing/parsers/string.js";
import { createSupportsFunc } from "../../supports/createSupportsFunc.js";
function objectFromKeys(keys, value) {
  return keys.reduce((acc, key)=>{
    acc[key] = value;
    return acc;
  }, {});
}
export class CloudStorage {
  createRequestId;
  postEvent;
  constructor(version, createRequestId, postEvent = defaultPostEvent){
    this.createRequestId = createRequestId;
    this.postEvent = postEvent;
    this.supports = createSupportsFunc(version, {
      delete: 'web_app_invoke_custom_method',
      get: 'web_app_invoke_custom_method',
      getKeys: 'web_app_invoke_custom_method',
      set: 'web_app_invoke_custom_method'
    });
  }
  /**
   * Deletes specified key or keys from the cloud storage.
   * @param keyOrKeys - key or keys to delete.
   * @param options - request execution options.
   */ async delete(keyOrKeys, options = {}) {
    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [
      keyOrKeys
    ];
    if (keys.length === 0) {
      return;
    }
    await invokeCustomMethod('deleteStorageValues', {
      keys
    }, this.createRequestId(), {
      ...options,
      postEvent: this.postEvent
    });
  }
  /**
   * Returns list of all keys presented in the cloud storage.
   * @param options - request execution options.
   */ async getKeys(options = {}) {
    const result = await invokeCustomMethod('getStorageKeys', {}, this.createRequestId(), {
      ...options,
      postEvent: this.postEvent
    });
    return array().of(string()).parse(result);
  }
  async get(keyOrKeys, options = {}) {
    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [
      keyOrKeys
    ];
    if (keys.length === 0) {
      return objectFromKeys(keys, '');
    }
    const schema = json(objectFromKeys(keys, string()));
    const result = await invokeCustomMethod('getStorageValues', {
      keys
    }, this.createRequestId(), {
      ...options,
      postEvent: this.postEvent
    }).then((data)=>schema.parse(data));
    return Array.isArray(keyOrKeys) ? result : result[keyOrKeys];
  }
  /**
   * Saves specified value by key.
   * @param key - storage key.
   * @param value - storage value.
   * @param options - request execution options.
   */ async set(key, value, options = {}) {
    await invokeCustomMethod('saveStorageValue', {
      key,
      value
    }, this.createRequestId(), {
      ...options,
      postEvent: this.postEvent
    });
  }
  /**
   * Checks if specified method is supported by current component.
   */ supports;
}
//# sourceMappingURL=CloudStorage.js.map