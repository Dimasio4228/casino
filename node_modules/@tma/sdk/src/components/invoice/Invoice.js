import { postEvent as defaultPostEvent } from "../../bridge/methods/postEvent.js";
import { request } from "../../bridge/request.js";
import { EventEmitter } from "../../event-emitter/EventEmitter.js";
import { State } from "../../state/State.js";
import { createSupportsFunc } from "../../supports/createSupportsFunc.js";
/**
 * Extracts invoice slug from URL.
 * @param url - url to extract slug from.
 */ function slugFromUrl(url) {
  const { hostname, pathname } = new URL(url, window.location.href);
  if (hostname !== 't.me') {
    throw new Error(`Incorrect hostname: ${hostname}`);
  }
  // Valid examples:
  // "/invoice/my-slug"
  // "/$my-slug"
  const match = pathname.match(/^\/(\$|invoice\/)([A-Za-z0-9\-_=]+)$/);
  if (match === null) {
    // eslint-disable-next-line no-template-curly-in-string
    throw new Error('Link pathname has incorrect format. Expected to receive "/invoice/{slug}" or "/${slug}"');
  }
  return match[2];
}
/**
 * Controls currently displayed invoice.
 */ export class Invoice {
  postEvent;
  ee;
  state;
  constructor(version, postEvent = defaultPostEvent){
    this.postEvent = postEvent;
    this.ee = new EventEmitter();
    this./**
   * Adds new event listener.
   */ on = this.ee.on.bind(this.ee);
    this./**
   * Removes event listener.
   */ off = this.ee.off.bind(this.ee);
    this.state = new State({
      isOpened: false
    }, this.ee);
    this.supports = createSupportsFunc(version, {
      open: 'web_app_open_invoice'
    });
  }
  set isOpened(value) {
    this.state.set('isOpened', value);
  }
  /**
   * True if invoice is currently opened.
   */ get isOpened() {
    return this.state.get('isOpened');
  }
  on;
  off;
  async open(urlOrSlug, type) {
    if (this.isOpened) {
      throw new Error('Invoice is already opened');
    }
    const slug = type ? slugFromUrl(urlOrSlug) : urlOrSlug;
    this.isOpened = true;
    try {
      const result = await request('web_app_open_invoice', {
        slug
      }, 'invoice_closed', {
        postEvent: this.postEvent,
        capture (data) {
          return slug === data.slug;
        }
      });
      return result.status;
    } finally{
      this.isOpened = false;
    }
  }
  /**
   * Checks if specified method is supported by current component.
   */ supports;
}
//# sourceMappingURL=Invoice.js.map