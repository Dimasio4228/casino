import { parseThemeParams } from "./parseThemeParams.js";
import { on } from "../../bridge/events/on.js";
import { isColorDark } from "../../colors/isColorDark.js";
import { EventEmitter } from "../../event-emitter/EventEmitter.js";
import { State } from "../../state/State.js";
export class ThemeParams {
  ee = new EventEmitter();
  state;
  constructor(params){
    this.state = new State(params, this.ee);
  }
  /**
   * @since v6.10
   */ get accentTextColor() {
    return this.get('accentTextColor');
  }
  get backgroundColor() {
    return this.get('backgroundColor');
  }
  get buttonColor() {
    return this.get('buttonColor');
  }
  get buttonTextColor() {
    return this.get('buttonTextColor');
  }
  get destructiveTextColor() {
    return this.get('destructiveTextColor');
  }
  /**
   * Retrieves palette color value by its name.
   * @param key - palette key name.
   */ get(key) {
    return this.state.get(key);
  }
  /**
   * Returns the copy of the internal state of the current component instance.
   */ getState() {
    return this.state.clone();
  }
  /**
   * @since v6.10
   */ get headerBackgroundColor() {
    return this.get('headerBackgroundColor');
  }
  get hintColor() {
    return this.get('hintColor');
  }
  /**
   * Returns true in case, current color scheme is recognized as dark. This
   * value is calculated according to theme background color.
   */ get isDark() {
    return !this.backgroundColor || isColorDark(this.backgroundColor);
  }
  get linkColor() {
    return this.get('linkColor');
  }
  /**
   * Adds new event listener.
   */ on = this.ee.on.bind(this.ee);
  /**
   * Removes event listener.
   */ off = this.ee.off.bind(this.ee);
  get secondaryBackgroundColor() {
    return this.get('secondaryBackgroundColor');
  }
  /**
   * @since v6.10
   */ get sectionBackgroundColor() {
    return this.get('sectionBackgroundColor');
  }
  /**
   * @since v6.10
   */ get sectionHeaderTextColor() {
    return this.get('sectionHeaderTextColor');
  }
  /**
   * Starts listening to theme changes and applies them.
   * @returns Function to stop listening.
   */ listen() {
    return on('theme_changed', (event)=>{
      this.state.set(parseThemeParams(event.theme_params));
    });
  }
  /**
   * @since v6.10
   */ get subtitleTextColor() {
    return this.get('subtitleTextColor');
  }
  get textColor() {
    return this.get('textColor');
  }
}
//# sourceMappingURL=ThemeParams.js.map