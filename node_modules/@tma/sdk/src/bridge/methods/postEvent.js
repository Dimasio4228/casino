import { logger, targetOrigin as globalTargetOrigin } from "../../globals.js";
import { isIframe } from "../../misc/isIframe.js";
import { hasExternalNotify } from "../env/hasExternalNotify.js";
import { hasWebviewProxy } from "../env/hasWebviewProxy.js";
export function postEvent(eventType, paramsOrOptions, options) {
  let postOptions = {};
  let eventData;
  if (paramsOrOptions === undefined && options === undefined) {
    // Parameters and options were not passed.
    postOptions = {};
  } else if (paramsOrOptions !== undefined && options !== undefined) {
    // Both parameters and options passed.
    postOptions = options;
    eventData = paramsOrOptions;
  } else if (paramsOrOptions !== undefined) {
    // Only parameters were passed.
    if ('targetOrigin' in paramsOrOptions) {
      postOptions = paramsOrOptions;
    } else {
      eventData = paramsOrOptions;
    }
  }
  const { targetOrigin = globalTargetOrigin() } = postOptions;
  logger.log(`Calling method "${eventType}"`, eventData);
  // Telegram Web.
  if (isIframe()) {
    window.parent.postMessage(JSON.stringify({
      eventType,
      eventData
    }), targetOrigin);
    return;
  }
  // Telegram for Windows Phone or Android.
  if (hasExternalNotify(window)) {
    window.external.notify(JSON.stringify({
      eventType,
      eventData
    }));
    return;
  }
  // Telegram for iOS and macOS.
  if (hasWebviewProxy(window)) {
    window.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));
    return;
  }
  // Otherwise current environment is unknown, and we are not able to send event.
  throw new Error('Unable to determine current environment and possible way to send event.');
}
//# sourceMappingURL=postEvent.js.map