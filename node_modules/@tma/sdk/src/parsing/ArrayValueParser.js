import { unexpectedTypeError } from "./unexpectedTypeError.js";
import { ValueParser } from "./ValueParser.js";
/**
 * Parses incoming value as array.
 * @param value - value to parse.
 */ function parseArray(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === 'string') {
    try {
      const json = JSON.parse(value);
      if (Array.isArray(json)) {
        return json;
      }
    // eslint-disable-next-line no-empty
    } catch (e) {}
  }
  throw unexpectedTypeError();
}
export class ArrayValueParser extends ValueParser {
  itemParser;
  constructor(itemParser, isOptional, type){
    super(parseArray, isOptional, type);
    this.itemParser = typeof itemParser === 'function' ? itemParser : itemParser.parse.bind(itemParser);
  }
  parse(value) {
    const arr = super.parse(value);
    return arr === undefined ? arr : arr.map(this.itemParser);
  }
  of(itemParser) {
    this.itemParser = typeof itemParser === 'function' ? itemParser : itemParser.parse.bind(itemParser);
    return this;
  }
}
//# sourceMappingURL=ArrayValueParser.js.map