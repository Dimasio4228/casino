/**
 * Opinionated event emitter implementation.
 */ export class EventEmitter {
  listeners = new Map();
  subscribeListeners = [];
  /**
   * Adds specified event listener.
   * @param event - event name.
   * @param listener - event listener.
   * @param once - should listener called only once.
   */ addListener(event, listener, once) {
    let listeners = this.listeners.get(event);
    if (!listeners) {
      listeners = [];
      this.listeners.set(event, listeners);
    }
    listeners.push([
      listener,
      once
    ]);
    return ()=>this.off(event, listener);
  }
  emit(event, ...args) {
    this.subscribeListeners.forEach((l)=>l(event, ...args));
    const listeners = this.listeners.get(event);
    if (!listeners) {
      return;
    }
    listeners.forEach(([listener, once], idx)=>{
      listener(...args);
      if (once) {
        listeners.splice(idx, 1);
      }
    });
  }
  /**
   * Adds event listener.
   * @param event - event name.
   * @param listener - event listener.
   * @returns Function to remove event listener.
   */ on(event, listener) {
    return this.addListener(event, listener, false);
  }
  /**
   * Adds event listener following the logic, described in `on` method, but calls specified
   * listener only once, removing it after.
   * @param event - event name.
   * @param listener - event listener.
   * @returns Function to remove event listener.
   * @see on
   */ once(event, listener) {
    return this.addListener(event, listener, true);
  }
  /**
   * Removes event listener. In case, specified listener was bound several times, it removes
   * only a single one.
   * @param event - event name.
   * @param listener - event listener.
   */ off(event, listener) {
    const listeners = this.listeners.get(event);
    if (!listeners) {
      return;
    }
    for(let i = 0; i < listeners.length; i += 1){
      if (listener === listeners[i][0]) {
        listeners.splice(i, 1);
        return;
      }
    }
  }
  /**
   * Adds event listener to all events.
   * @param listener - events listener.
   * @returns Function to remove event listener.
   * @see on
   * @see once
   */ subscribe(listener) {
    this.subscribeListeners.push(listener);
    return ()=>this.unsubscribe(listener);
  }
  /**
   * Removes global event listener. In case, specified listener was bound several times, it removes
   * only a single one.
   * @param listener - events listener.
   * @returns Function to remove event listener.
   */ unsubscribe(listener) {
    for(let i = 0; i < this.subscribeListeners.length; i += 1){
      if (this.subscribeListeners[i] === listener) {
        this.subscribeListeners.splice(i, 1);
        return;
      }
    }
  }
}
//# sourceMappingURL=EventEmitter.js.map