/**
 * Message log level.
 */ export class Logger {
  prefix;
  enabled;
  constructor(prefix, enabled){
    this.prefix = prefix;
    this.enabled = enabled;
  }
  /**
   * Prints message into a console in case, logger is currently enabled.
   * @param level - log level.
   * @param args - arguments.
   */ print(level, ...args) {
    if (!this.enabled) {
      return;
    }
    const now = new Date();
    const date = Intl.DateTimeFormat('en-GB', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      fractionalSecondDigits: 3,
      timeZone: 'UTC'
    }).format(now);
    // eslint-disable-next-line no-console
    console[level](`[${date}]`, this.prefix, ...args);
  }
  /**
   * Disables the logger.
   */ disable() {
    this.enabled = false;
  }
  /**
   * Prints error message into a console.
   * @param args
   */ error(...args) {
    this.print('error', ...args);
  }
  /**
   * Enables the logger.
   */ enable() {
    this.enabled = true;
  }
  /**
   * Prints log message into a console.
   * @param args
   */ log(...args) {
    this.print('log', ...args);
  }
  /**
   * Prints warning message into a console.
   * @param args
   */ warn(...args) {
    this.print('warn', ...args);
  }
}
//# sourceMappingURL=Logger.js.map