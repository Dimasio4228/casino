import type { MiniAppsEventHasParams, MiniAppsEventName, MiniAppsEventParams } from "./events/events.js";
import type { MiniAppsEmptyMethodName, MiniAppsMethodAcceptParams, MiniAppsMethodName, MiniAppsMethodParams, MiniAppsNonEmptyMethodName } from "./methods/methods.js";
import type { And, If } from "../types/logical.js";
import type { ExecuteWithOptions } from "../types/methods.js";
import type { IsNever } from "../types/utils.js";
/**
 * Names of methods, which require passing "req_id" parameter.
 */ type MethodWithRequestId = {
  [M in MiniAppsMethodName]: If<And<MiniAppsMethodAcceptParams<M>, MiniAppsMethodParams<M> extends {
    req_id: string;
  } ? true : false>, M, never>;
}[MiniAppsMethodName];
/**
 * Names of events, which contain "req_id" parameter.
 */ type EventWithRequestId = {
  [E in MiniAppsEventName]: If<And<MiniAppsEventHasParams<E>, MiniAppsEventParams<E> extends {
    req_id: string;
  } ? true : false>, E, never>;
}[MiniAppsEventName];
export interface RequestOptions extends ExecuteWithOptions {
}
export interface RequestOptionsAdvanced<EventPayload> extends RequestOptions {
  /**
   * Should return true in case, this event should be captured. If not specified,
   * request is not skipping captured events.
   */ capture?: If<IsNever<EventPayload>, () => boolean, (payload: EventPayload) => boolean>;
}
/**
 * Calls specified TWA method and captures one of the specified events. Returns promise
 * which will be resolved in case, event with specified in method request identifier
 * was captured.
 * @param method - method to execute.
 * @param params - method parameters.
 * @param event - event or events to listen.
 * @param options - additional execution options.
 */ export declare function request<M extends MethodWithRequestId, E extends EventWithRequestId>(method: M, params: MiniAppsMethodParams<M>, event: E | E[], options?: RequestOptions): Promise<MiniAppsEventParams<E>>;
/**
 * Calls specified TWA method and captures one of the specified events. Returns promise
 * which will be resolved in case, specified event was captured.
 * @param method - method to execute.
 * @param event - event or events to listen.
 * @param options - additional execution options.
 */ export declare function request<M extends MiniAppsEmptyMethodName, E extends MiniAppsEventName>(method: M, event: E | E[], options?: RequestOptionsAdvanced<MiniAppsEventParams<E>>): Promise<MiniAppsEventParams<E>>;
/**
 * Calls specified TWA method and captures one of the specified events. Returns promise
 * which will be resolved in case, specified event was captured.
 * @param method - method to execute
 * @param params - method parameters.
 * @param event - event or events to listen
 * @param options - additional execution options.
 */ export declare function request<M extends MiniAppsNonEmptyMethodName, E extends MiniAppsEventName>(method: M, params: MiniAppsMethodParams<M>, event: E | E[], options?: RequestOptionsAdvanced<MiniAppsEventParams<E>>): Promise<MiniAppsEventParams<E>>;
//# sourceMappingURL=request.d.ts.map